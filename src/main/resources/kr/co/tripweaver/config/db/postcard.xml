<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="postcardSQL">
	
	<select id="selectPostCardAll" parameterType="Map" resultType="postcardVo">
		SELECT * FROM
		(SELECT rownum rnum, list2.* FROM (
		select 
		p. *
		, m.mem_nick
		, m.mem_profile
		from POSTCARD p INNER JOIN member m
		on (p.mem_id = m.mem_id and p.PC_DEL = 'N') 
		
		<if test="tag_search != '' ">
		inner join 
		(
		SELECT
		    distinct PC_ID
		FROM HASHTAG 
		WHERE TAG_WORD like '%' ||  #{tag_search} || '%'
		) has
		on (has.PC_ID = p.PC_ID )
		</if>
		
		ORDER by p.pc_date desc
		)list2)
		where rnum = ${pageVo.page}
		and pc_del = 'N'
	
	</select>
	
	<!-- 포스트카드 삭제하기 -->
	<update id="deletePostcard"  parameterType="postcardVo">
		UPDATE postcard
		set PC_DEL = 'Y'
		where PC_ID = #{pc_id}
		and MEM_ID = #{mem_id}
	</update>
	
	<!-- 포스트 카드 글쓰기 -->
	<insert id="insertPostcard" parameterType="postcardVo">
		<selectKey resultType="String" keyProperty="pc_id" order="BEFORE" >
  			SELECT	'pc'||lpad(pc_seq.nextval, 5, 0) from dual
  		</selectKey>
		insert into postcard (
		    pc_id
		    , pc_cnt
		    , pc_date
		    , pc_like_count
		    , pc_del
		    , mem_id
		)
		values (
		      #{pc_id}
		    , #{pc_cnt}
		    , sysdate
		    , 0
		    , 'N'
		    , #{mem_id}
		)
	</insert>
	
	<!-- 포스트카드 업데이트 -->
	<update id="updatePostcard" parameterType="postcardVo">
		UPDATE postcard
		set pc_cnt = #{pc_cnt}
		where PC_ID = #{pc_id}
	</update>
	
	<!-- 포스트카드 해당 게시글 내용 잡아오기 -->
	<select id="selectPostcard" parameterType="String" resultType="postcardVo">
		SELECT
		    *
		FROM postcard
		where PC_ID = #{pc_id}
	</select>

	<select id="selectPostcardClip" parameterType="Map"  resultType="postcardVo">
		SELECT  rrnum.* FROM( 
		    select
		     p.pc_id        
		    ,p.pc_cnt       
		    ,p.pc_date      
		    ,p.pc_del       
		    ,p.mem_id 
		    ,m.mem_nick 
		    ,a.att_path
		    ,a.att_file_name
		    ,rownum rnum
		    , likeNum.*
		    from POSTCARD p inner join (
		        select 
		        count(*) as pc_like_count
		        ,LIKE_REL_ART_ID
		        from likes
		        WHERE FILTER_id = 'postcard'
		        GROUP BY LIKE_REL_ART_ID
		    ) likeNum
		    on (likeNum.LIKE_REL_ART_ID = p.PC_ID) inner join likes l
		        on (likeNum.LIKE_REL_ART_ID = l.LIKE_REL_ART_ID and l.mem_id = #{mem_id}) inner join 
		             (SELECT p.*,
		                   att2.att_path,
		                   att2.att_file_name
		                FROM postcard p left outer join (SELECT att.* 
		                    FROM attachment att inner JOIN (SELECT att_rel_art_id, 
		                        MIN(att_id) AS att_id
		                        FROM attachment
		                        GROUP BY att_rel_art_id
		                        ORDER BY ATT_REL_ART_ID) a
		                    ON (att.att_id = a.att_id)) att2
		                        ON (p.pc_id = att2.att_rel_art_id)
		                        ORDER BY p.pc_id
		             )a 
		            on (p.PC_ID = a.pc_id )inner join member m
            		on (p.mem_id = m.mem_id)
		            where p.PC_DEL = 'N'
		             <if test="tag_search != '' ">
		 		and ${search_title} like '%' ||  #{tag_search} || '%'</if>)rrnum
		where rrnum.rnum between #{pageVo.page}*#{pageVo.pageSize}-(#{pageVo.pageSize}-1) and #{pageVo.page}*#{pageVo.pageSize}
	</select>
	
	<!-- 클립보드 게시물 총 개수 알아오기 -->
	<select id="selectAllPostClip" resultType="int" parameterType="Map">
		select
		count(*)
		from POSTCARD p inner join (
		    select 
		    count(*) as COUNT
		    ,LIKE_REL_ART_ID
		    from likes
		    WHERE FILTER_id = 'postcard'
		    GROUP BY LIKE_REL_ART_ID
		) likeNum
		on (likeNum.LIKE_REL_ART_ID = p.PC_ID)
		inner join likes l
		 on (likeNum.LIKE_REL_ART_ID = l.LIKE_REL_ART_ID and l.mem_id = #{mem_id})
		 where p.PC_DEL = 'N'
		 <if test="tag_search != '' ">
		 and p.MEM_ID like '%' ||  #{tag_search} || '%'
		 </if>
	</select>
	
	
	<!-- 메인에 사용할 postCard 최근 리스트를 가져오는 쿼리 -->
	<select id="recentPostCardList" resultType="postcardVo">
		select pc_id, pc_cnt
		from
		(
		select * 
		from postcard
		where pc_del = 'N' 
		order by pc_date desc
		)
		where rownum <![CDATA[<]]>=6
	</select>
	
	<!-- 게시글 관리의 포스트 카드 목록을 뽑기 위한 쿼리문-->
	<select id="selectPostCardByMemIdForBoard" resultType="postcardVo" parameterType="Map">
		select rownum rnum, mypostcard.*
		from
		(
		    select * from postcard where mem_id = #{mem_id}
		    order by pc_date asc
		) mypostcard
		where rownum between 1+((to_number(#{page})-1)*10) and (to_number(#{page})*10)
		order by rnum desc
	</select>
	
	<!-- 게시글 관리의 포스트카드 개수를 알기위한 쿼리문-->
	<select id="postCardTotalCount" resultType="Integer" parameterType="String">
		select count(rownum)
		from
		(
		    select * from postcard where mem_id = #{mem_id}
		    order by pc_date asc
		) myessay
		order by rownum desc
	</select>
	
	
	<!-- 포스트 카드 단일 가져오기 -->
	<select id="selectSinglePost" resultType="postcardVo" parameterType="String">
		select 
		 p. *
		, m.mem_nick
		, m.mem_profile
		from POSTCARD p INNER JOIN member m 
		on (p.mem_id = m.mem_id) inner join  
		(
		SELECT
		    distinct PC_ID
		FROM HASHTAG 
		WHERE PC_ID = #{pc_id}
		) has
		on (has.PC_ID = p.PC_ID )
	</select>
	
	
	<!-- 베스트 포스트 카드를 위한 쿼리 문 -->
	
	<select id="bestPostSelect" parameterType="Map" resultType="postcardVo"> 
		SELECT
    		rownum rnum, rrrrnum.*
			FROM(
			select * from
			(SELECT  rrnum.* from
			(
			    SELECT
			    p.pc_id
			    ,p.pc_cnt
			    ,p.pc_date
			    ,p.pc_del
			    ,nvl(c.comt_count, 0) as comt_count
			    ,nvl(l.like_count, 0) as pc_like_count
			    , nvl(c.comt_count, 0)*1.5 + nvl(l.like_count, 0) sum_count
			    , m.MEM_NICK
    			, m.MEM_PROFILE
			FROM postcard p left outer join (
			    select
			    comt_rel_art_id
			    , COUNT(*) as comt_count
			    from comments 
			    group by comt_rel_art_id
			) c
			on (p.pc_id = c.comt_rel_art_id ) left outer join (
			    select
			    like_rel_art_id
			    , COUNT(*) as like_count
			    from likes 
			    group by like_rel_art_id
			)l
			on (p.pc_id = l.like_rel_art_id) inner join member m
			on (p.MEM_ID = m.MEM_ID)
			where p.pc_del = 'N'
			order by sum_count desc, pc_date desc
			)rrnum)rrrnum
			where rrrnum.pc_date between to_date(#{startDate},'yyyyMMdd') and to_date(#{endDate} || '23:59:59','yyyyMMdd HH24:MI:SS')
			)rrrrnum
			where rownum  <![CDATA[<]]>  31
	</select>
	
</mapper>