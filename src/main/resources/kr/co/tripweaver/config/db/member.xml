<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberSQL">
	
  <!-- 해당 이메일에 해당하는 회원이 존재하는지 확인 -->
  <select id="selectMemberByEmail" parameterType="String" resultType="memberVo" >
  	select * from member where mem_email = #{mem_email}
  </select>
	
  <!-- Naver Member 에 대한 값을 DB에 넣어주는 일을 한다. -->
  <insert id="insertNaverMember" parameterType="memberVo">
  	insert into member(mem_id, mem_email, mem_name, mem_nick, mem_age, mem_gender, mem_profile, mem_author, mem_del) values(#{mem_id}, #{mem_email}, #{mem_name}, #{mem_nick}, #{mem_age}, #{mem_gender}, #{mem_profile}, '1', 'N')
  </insert>
  
  <!-- 회원의 아이디와 비밀번호가 일치하는 DB member table에 해당하는 memberVO를 반환한다.  -->
  <select id="selectMemberByIdAndPass" parameterType="memberVo" resultType="memberVo">
  	select * from member where mem_id = #{mem_id} and mem_pass = #{mem_pass}
  </select>
  
  <!-- 해당 이메일에 해당하는 회원이 존재할 시 해당 회원에 대한 정보를 지운다.  -->
  <delete id="eternalDeleteMemberByEmail" parameterType="String">
  	delete from member where mem_email = #{mem_email}
  </delete>
  
  <!-- 해당 아이디에 해당하는 회원이 존재하는지 확인  -->
  <select id="selectMemberById" parameterType="String" resultType="memberVo">
  	select * from member where mem_id = #{mem_id}
  </select>
  
  <!--신규 회원 가입 관련 쿼리 -->
  <insert id="insertMember" parameterType="memberVo">
  	insert into member(mem_id, mem_email, mem_pass, mem_name, mem_nick, mem_tel, mem_age, mem_gender, mem_follower_count, mem_following_count, mem_del, mem_author)
  	values(#{mem_id}, #{mem_email}, #{mem_pass}, #{mem_name}, #{mem_nick}, #{mem_tel}, #{mem_age}, #{mem_gender}, 0, 0, 'N', 1)
  </insert>
  
  <!-- 회원 정보 변경 쿼리 -->
  <update id="updateMember" parameterType="memberVo">
  	update member
  	set 
  	<if test="mem_pass != null">
  		mem_pass = #{mem_pass},
  	</if>
  	<if test="mem_nick != null">
  		mem_nick = #{mem_nick},
  	</if>
  	<if test="mem_tel != null">
  		mem_tel = #{mem_tel},
  	</if>
  	<if test="mem_email != null">
  		mem_email = #{mem_email},
  	</if>
  	<if test="mem_name != null">
  		mem_name = #{mem_name},
  	</if>
	 mem_age = #{mem_age}, mem_profile = #{mem_profile}
  	where mem_id = #{mem_id}
  </update>
  
  <!-- 모든 회원리스트를 조회 -->
  <select id="selectMemberAllCount" parameterType="Map" resultType="integer">
  	SELECT COUNT(*) FROM member
  	WHERE mem_del = 'N'
  	AND ${sfl} LIKE '%${stx}%'
  	AND mem_author LIKE '%${author}%'
  </select>
 
  <!-- 해당페이지릐 회원리스트를 조회 -->
  <select id="selectMemberPageList" parameterType="Map" resultType="memberVo">
  	SELECT m2.*
	FROM (  SELECT ROWNUM AS rnum, 
	               m.*
	        FROM (SELECT *
	              FROM member
	              WHERE mem_del = 'N'
	              AND ${sfl} LIKE '%${stx}%'
	              AND mem_author LIKE '%${author}%'
	              ORDER BY ${sort_id} ${sort_st}) m) m2
	WHERE rnum BETWEEN (${pageVO.page}*${pageVO.pageSize})-(${pageVO.pageSize}-1) AND ${pageVO.page}*${pageVO.pageSize}
  </select>
  
  <update id="manageUpdateMemberAuthor" parameterType="memberVo">
  	UPDATE member
  	SET mem_author = ${mem_author}
  	WHERE mem_id = #{mem_id}
  </update>
  
  <update id="manageDeleteMemberDel" parameterType="String">
  	UPDATE member
  	SET mem_del = 'Y'
  	WHERE mem_id = #{mem_id}
  </update>
  
  <select id="manageCountMemberDel" resultType="int">
  	SELECT COUNT(*) AS delCnt
    FROM member
	WHERE mem_del = 'Y'
  </select>
  
  <select id="manageCountMemberAuth" resultType="int">
  	SELECT COUNT(*) AS authCnt
    FROM member
    WHERE mem_author = 3
    AND mem_del = 'N'
  </select>
  
  <!-- 아이디 찾기용 쿼리 -->
  <select id="findIdCheck" resultType="memberVo" parameterType="memberVo">
  		select * from member
  		where mem_name = #{mem_name} and mem_tel = #{mem_tel} and mem_email = #{mem_email}
  </select>
  
  <!--비밀번호 찾기용 쿼리 -->
  <select id="findPassCheck" resultType="memberVo" parameterType="memberVo">
  		select * from member
  		where mem_id = #{mem_id} and mem_email = #{mem_email}
  </select>
</mapper>