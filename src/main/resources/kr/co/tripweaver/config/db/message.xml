<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="messageSQL">
	
	<select id="selectChatroom" parameterType="String" resultType="messageVo">
		SELECT a.*, NVL(b.rec_cnt, 0) AS rec_cnt
		FROM (SELECT p.*, p2.cnt, m.msg_cnt, m.msg_date
		        FROM participant p LEFT OUTER JOIN (SELECT *
		                                        FROM (SELECT group_id, msg_cnt, msg_date
		                                            , MAX(msg_date) OVER(PARTITION BY group_id) AS max_date 
		                                              FROM message)
		                                        WHERE msg_date = max_date) m
		                        ON (p.group_id = m.group_id) , chatroom c, (SELECT a.group_id AS group_id, 
		                                                                    NVL(b.cnt, 0) AS cnt 
		                                                                    FROM chatroom a LEFT OUTER JOIN (SELECT group_id, 
		                                                                                                     COUNT(*) AS cnt
		                                                                                                     FROM participant 
		                                                                                                     GROUP BY group_id) b
		                                                                                                     ON (b.group_id = a.group_id)) p2
		        WHERE p.mem_id = #{mem_id}
		        AND (p.group_id = c.group_id)
		        AND (c.group_del = 'N')
		        AND (m.group_id = p2.group_id)
		        ORDER BY max_date DESC) a LEFT OUTER JOIN (SELECT c.group_id AS group_id, COUNT(*) AS rec_cnt
		                                                    FROM chatroom c INNER JOIN message m
		                                                    ON (c.group_id = m.group_id) LEFT OUTER JOIN msgreciver mr
		                                                    ON (m.msg_id = mr.msg_id)
		                                                    WHERE (mr.rec_id = #{mem_id})
		                                                    GROUP BY c.group_id) b
		ON (a.group_id = b.group_id)
	</select>
	
	<select id="selectChatroomName" parameterType="participantVo" resultType="String">
		SELECT chatroom_name
		FROM participant
		WHERE group_id = #{group_id}
		AND mem_id = #{mem_id}
	</select>
	
	<select id="selectParticipantNickList" parameterType="String" resultType="String">
		SELECT m.mem_nick
		FROM participant p INNER JOIN member m
		ON (p.mem_id = m.mem_id)
		AND group_id = #{group_id}
	</select>
	
	<select id="selectMessageList" parameterType="String" resultType="messageVo">
		SELECT mem_nick, mem_profile, msg.*, NVL(mr.unread, 0) AS unread
		FROM message msg INNER JOIN member mem
		ON(msg.mem_id = mem.mem_id) LEFT OUTER JOIN (SELECT COUNT(*) unread, msg_id
		                                            FROM msgreciver
		                                            GROUP BY msg_id) mr
		ON(msg.msg_id = mr.msg_id)
		WHERE group_id = #{group_id}
		ORDER BY msg_date ASC
	</select>
	
	<select id="selectChatroomMemberList" parameterType="String" resultType="String">
		SELECT mem_id
		FROM participant
		WHERE group_id = #{group_id}
	</select>
	
	<insert id="insertChatroom" parameterType="Map">
		<selectKey keyProperty="group_id" resultType="String" order="BEFORE">
			SELECT 'chat' || LPAD(CHR_SEQ.NEXTVAL, 5, 0) FROM DUAL
		</selectKey>
		INSERT INTO chatroom
		VALUES (#{group_id}, 'N')
	</insert>
	
	<delete id="deleteChatroom" parameterType="String">
		DELETE FROM chatroom
		WHERE group_id = #{group_id}
	</delete>
	
	<insert id="insertMessage" parameterType="messageVo">
		<selectKey keyProperty="msg_id" resultType="String" order="BEFORE">
			SELECT 'msg' || LPAD(msg_seq.NEXTVAL, 5, 0) FROM DUAL
		</selectKey>
		INSERT INTO message
		VALUES (#{msg_id}, #{msg_date}, #{msg_cnt}, #{mem_id}, #{group_id})
	</insert>
	
	<delete id="deleteParticipant" parameterType="participantVo">
		DELETE FROM participant
		WHERE group_id = #{group_id}
		AND	mem_id = #{mem_id}
	</delete>
	
	<update id="updateChatroomName" parameterType="participantVo">
		UPDATE participant
		SET chatroom_name = #{chatroom_name}
		WHERE group_id = #{group_id}
		AND mem_id = #{mem_id}
	</update>
	
	<select id="selectParticipantCount" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM participant
		WHERE group_id = #{group_id}
	</select>
	
	<update id="updateChatroomDel" parameterType="String">
		UPDATE chatroom
		SET group_del = 'Y'
		WHERE group_id = #{group_id}
	</update>
	
	<insert id="insertMsgReciver" parameterType="Map">
		INSERT INTO msgreciver
		VALUES (#{mem_id}, #{msg_id})
	</insert>
	
	<select id="selectMessageByMsg_id" parameterType="String" resultType="messageVo">
		SELECT mem.mem_nick, mem.mem_profile, mr.unread, msg.*
		FROM message msg INNER JOIN member mem
		ON (msg.mem_id = mem.mem_id) , (SELECT COUNT(*) AS unread, msg_id
		                                FROM msgReciver
		                                WHERE msg_id = #{msg_id}
		                                GROUP BY msg_id) mr
		WHERE (msg.msg_id = mr.msg_id)
	</select>
	
	<select id="insertParticipant" parameterType="participantVo">
		INSERT INTO participant
		VALUES (#{group_id}, #{mem_id}, #{chatroom_name})
	</select>
	
	<select id="selectGroupMsgCount" parameterType="String" resultType="messageVo">
		SELECT msg.msg_id, COUNT(*) AS unread
		FROM msgReciver mr INNER JOIN message msg
		ON (mr.msg_id = msg.msg_id AND msg.group_id = #{group_id})
		GROUP BY msg.msg_id
	</select>
	
	<delete id="deleteMsgReciver" parameterType="participantVo">
		DELETE FROM (SELECT mr.*
					 FROM (SELECT *
					     FROM message
					     WHERE group_id = #{group_id}) m INNER JOIN msgreciver mr
					 ON (m.msg_id = mr.msg_id AND rec_id = #{mem_id}))
	</delete>
	
	<select id="messageAlram" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM msgreciver
		WHERE rec_id = #{mem_id}
	</select>
	
</mapper>